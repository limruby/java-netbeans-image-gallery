
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.OverlayLayout;
import javax.swing.border.LineBorder;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author User
 */
public class Gui extends java.awt.Frame {

    /**
     * Creates new form GU
     */
     Connection myconObj;  // to connect DB
     Statement myStatObj =null;  // to execute queries
     ResultSet myresObj =null; // present the data fetch from queries
     PreparedStatement pstmt; //Prepared statment
     ResultSetMetaData mymeta = null; // to process queries
    
    public int selectedID;
    static boolean filtered = false;
    static String searchedText ;
    static boolean searchTriggered = false;
    static boolean annotateTriggered = false;
    public static Gui MainWindow;
    write WriteWindow;
    
    public Gui() {
        initComponents();
    }
    // connect to JDBC
    public void db(){
         try {
             myconObj = DriverManager.getConnection("jdbc:derby://localhost:1527/localDB", "MMP", "1234");
             myStatObj = myconObj.createStatement();
             myresObj = myStatObj.executeQuery("SELECT * from MMP.MyTable");
             mymeta = myresObj.getMetaData();
             System.out.println("Database connected"); 
        //Print db data
             int columnNo = mymeta.getColumnCount();
            for(int i=1; i<=columnNo; i++){
                System.out.print(mymeta.getColumnName(i)+ "\t");
            }
            
            System.out.println();
            while(myresObj.next()){
                for(int i =1; i<=columnNo; i++){
                    System.out.print(myresObj.getObject(i)+ "\t");
                }
                System.out.println();
            }    
         } catch (SQLException ex) {
             ex.printStackTrace();
         }
    
    }
    /**
     * @param args the command line arguments
     */
    //MAIN METHOD
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainWindow = new Gui();
                MainWindow.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        msg = new javax.swing.JLabel();
        DisplayScrollPane = new javax.swing.JScrollPane();
        imgPanel = new javax.swing.JPanel();
        functionPanel = new javax.swing.JPanel();
        Upload = new javax.swing.JButton();
        Annotate = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Filter = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        cancelSearchBtn = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        Title.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Title.setText("Gallery");

        msg.setForeground(new java.awt.Color(51, 255, 51));

        imgPanel.setToolTipText("");
        imgPanel.setLayout(new java.awt.GridLayout(0, 3));
        DisplayScrollPane.setViewportView(imgPanel);
        myresObj = GetDisplayedData();
        SpawnJLabelInImgPanel();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(Title)
                        .addGap(967, 967, 967))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(msg)
                            .addComponent(DisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 974, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title)
                .addGap(4, 4, 4)
                .addComponent(DisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(msg)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Upload.setText("Upload");
        Upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadActionPerformed(evt);
            }
        });

        Annotate.setText("Annotate");
        Annotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnnotateActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Filter.setText("Filter");
        Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterActionPerformed(evt);
            }
        });

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        cancelSearchBtn.setText("X");
        cancelSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelSearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout functionPanelLayout = new javax.swing.GroupLayout(functionPanel);
        functionPanel.setLayout(functionPanelLayout);
        functionPanelLayout.setHorizontalGroup(
            functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(functionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Annotate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Upload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Filter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelSearchBtn)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        functionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Annotate, Delete, Filter, Upload});

        functionPanelLayout.setVerticalGroup(
            functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(functionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Upload)
                .addGap(18, 18, 18)
                .addComponent(Annotate)
                .addGap(18, 18, 18)
                .addComponent(Delete)
                .addGap(18, 18, 18)
                .addComponent(Filter)
                .addGap(36, 36, 36)
                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelSearchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addGap(330, 330, 330))
        );

        functionPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cancelSearchBtn, searchField});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(functionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(functionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    
    
    private void FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterActionPerformed

        if(filtered == true){
            filtered = false;
            myresObj = GetDisplayedData();
            Filter.setText("Filter");
            Filter.setBackground(new JButton().getBackground());
        } else {
            filtered = true;
            myresObj = GetAnnotatedData();
            Filter.setBackground(Color.YELLOW);
            Filter.setText("Unfilter");
        }
        clearPanel();
        SpawnJLabelInImgPanel();
    }//GEN-LAST:event_FilterActionPerformed

    private void AnnotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnnotateActionPerformed
                                        
    if (selectedID >1){
           annotateTriggered = true;
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    WriteWindow = new write(selectedID);
                    WriteWindow.setParentObject(MainWindow);
                    WriteWindow.setVisible(true);
                }
            });
    }else{
        msg.setText("Please select an image");
        msg.setForeground(Color.RED);
    }

    }//GEN-LAST:event_AnnotateActionPerformed

    private void UploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadActionPerformed
       //Fetch image 
        JFileChooser filechooser = new JFileChooser (); // enable user to choose file from computer
        FileNameExtensionFilter filter = new FileNameExtensionFilter ("4 Extensions Supported","jpg","png","jpeg","gif");
        filechooser.setFileFilter(filter);
        int selected = filechooser.showOpenDialog(this);
        
        if(selected == JFileChooser.APPROVE_OPTION){
            File file = filechooser.getSelectedFile();
            String getSelectedImage = file.getAbsolutePath();
            JOptionPane.showMessageDialog(null, getSelectedImage);
         
            //Storing image in database
            try {
                db();
                PreparedStatement upload = myconObj.prepareStatement("INSERT INTO MMP.MyTable(FILENAME,IMAGE) VALUES(?, ?)");       
               
                String [] FileName = getSelectedImage.split("\\\\");  
                String[] newfileName = FileName[FileName.length-1].split("\\.");   
                String fileName = newfileName[0];
                upload.setString(1, fileName);
                FileInputStream img = new FileInputStream(getSelectedImage);
                upload.setBlob(2, img); 
                upload.execute();  
                msg.setText("Image uploaded!");
            } catch (SQLException | FileNotFoundException ex) {
                ex.printStackTrace();
               
            } 
            clearPanel();
            myresObj = GetDisplayedData();
            SpawnJLabelInImgPanel();
        }
    }//GEN-LAST:event_UploadActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        
    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
       searchedText = searchField.getText();
       searchTriggered = true;
       System.out.println("pressed");
       
       myresObj = GetSearchedData();
       cancelSearchBtn.setBackground(Color.YELLOW);
       
       clearPanel();
       SpawnJLabelInImgPanel();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void cancelSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelSearchBtnActionPerformed
        myresObj = GetDisplayedData();
        searchTriggered = false;
        searchField.setText("");
        cancelSearchBtn.setBackground(new JButton().getBackground());
        
        clearPanel();
        SpawnJLabelInImgPanel();
    }//GEN-LAST:event_cancelSearchBtnActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
         try {
                db();
                PreparedStatement delete = myconObj.prepareStatement("DELETE FROM MMP.MyTable WHERE ID = " + selectedID);        
                msg.setText("Image deleted");
                delete.execute();    
                
            } catch (SQLException ex) {
                ex.printStackTrace();   
            } 
            clearPanel();
            myresObj = GetDisplayedData();
            SpawnJLabelInImgPanel();
    }//GEN-LAST:event_DeleteActionPerformed

    // Clear image panel (refresh purpose)
    public void clearPanel()
    {   
        MainWindow.imgPanel.removeAll();
        MainWindow.imgPanel.revalidate(); 
        MainWindow.imgPanel.repaint();
    }
    
    // Display image 
    public void SpawnJLabelInImgPanel(){
        try {    
           
            if (annotateTriggered == true) //get data to refresh
            {
                if(searchTriggered == true) //if search is still on
                {
                    myresObj = GetSearchedData(); 
                }
                else if (filtered == true) //if filter is still on
                {
                    myresObj = GetAnnotatedData();
                }
                
                else{
                    myresObj = GetDisplayedData(); //get all data 
                }
                
            }
            
            if (searchTriggered == true && filtered == true) // if search and filter are triggered
            {
                myresObj = GetSearchedNFilteredData();
            }
            
            // display array of images
            ArrayList<JLabel> pics = new ArrayList<>();
            ArrayList<JLabel> picsLabels = new ArrayList<>();
            ArrayList<JPanel> boxPanels = new ArrayList<>();
            ArrayList<JPanel> overlayPanels = new ArrayList<>();
            ArrayList<JPanel> lovePanels = new ArrayList<>();
            int i = 0;

            while(myresObj.next()){

                int id = myresObj.getInt("ID");
                String fileName = myresObj.getString("FILENAME");
                String annotation = myresObj.getString("ANNOTATION");
                String [] newFileName = fileName.split("\\\\");  
                InputStream is = myresObj.getBinaryStream("IMAGE");

                //CREATE LABEL
                pics.add(new JLabel());

                picsLabels.add(new JLabel());

                boxPanels.add(new JPanel());

                overlayPanels.add(new JPanel());
                lovePanels.add(new JPanel());

                pics.get(i).setMinimumSize(new Dimension(200, 200));
                pics.get(i).setPreferredSize(new Dimension(200, 200));
                pics.get(i).setMaximumSize(new Dimension(200, 200));
                pics.get(i).setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
                pics.get(i).setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                pics.get(i).setToolTipText(annotation);

                // Decode the inputstream as BufferedImage
                try{
                    BufferedImage img=ImageIO.read(is);

                    Image imgIcon = img.getScaledInstance(200, 200, Image.SCALE_SMOOTH);

                    pics.get(i).setIcon(new ImageIcon(imgIcon));
                     picsLabels.get(i).setText(newFileName[newFileName.length-1]); 

                    pics.get(i).addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            JLabel labelSc = (JLabel) evt.getSource();
                            Component[] boxComponents = imgPanel.getComponents();
                            for (int m = 0; m < boxComponents.length; m++) {
                                JPanel panel = (JPanel) boxComponents[m];
                                Component[] overLayComponents = panel.getComponents();
                                for (int n = 0; n < overLayComponents.length; n++) {
                                    if ((overLayComponents[n] instanceof JPanel)) {
                                        JPanel panel2 = (JPanel) overLayComponents[n];
                                       
                                    Component[] components = panel2.getComponents();
                                    for (int o = 0; o < components.length; o++) {
                                        if ((components[o] instanceof JLabel)) {
                                            JLabel label = (JLabel) components[o];
                                            if((LineBorder)label.getBorder()!=null){
                                                label.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK, 3));
                                            }

                                        }
                                    }
                                     }
                                }
                            }
                            labelSc.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED, 3));
                                
                            //SELECT DB ROW
                    
                         System.out.println( id+" is selected.");
                         selectedID = id;
                         
                        };

                    });

                    //create loveSymbol if myresObj.getBoolean("anotated") = TRUE
                    String annotated = myresObj.getString("ANNOTATION");
                    JLabel loveSign = new JLabel();
                    if(annotated!=null){
                        loveSign.setText("<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u2764<br/><br/><br/><br/> </html>");
                        loveSign.setFont(new java.awt.Font("monospaced", 1, 40));
                        loveSign.setForeground(Color.RED);
                        loveSign.setAlignmentX(0.02f);
                    }
 
                    
                    boxPanels.get(i).setLayout(new BoxLayout(boxPanels.get(i), BoxLayout.Y_AXIS));
                    overlayPanels.get(i).setLayout(new OverlayLayout(overlayPanels.get(i)));
                    overlayPanels.get(i).add(loveSign);
                    overlayPanels.get(i).add(pics.get(i));
                    boxPanels.get(i).add(overlayPanels.get(i));
                    boxPanels.get(i).add(picsLabels.get(i));
                    imgPanel.add(boxPanels.get(i));

                }catch(Exception e){
                    System.out.println(e);
                }
                i ++;
            }
      annotateTriggered = false;
      } catch (SQLException ex) {
            ex.printStackTrace();
}
    }
    
    // get result set for display
    private ResultSet GetDisplayedData()
    {
        try {
            db();
            myresObj = myStatObj.executeQuery("SELECT * from MMP.MyTable");
            mymeta = myresObj.getMetaData();
         
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return myresObj;
    }
    
    private ResultSet GetAnnotatedData()
    {
        try {
            db();
            myresObj = myStatObj.executeQuery("SELECT * from MMP.MyTable WHERE ANNOTATION IS NOT NULL");
            mymeta = myresObj.getMetaData();
         
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return myresObj;
    
    }

    private ResultSet GetSearchedData()
    {
        try {
            db();
            myresObj = myStatObj.executeQuery("SELECT * from MMP.MyTable WHERE FILENAME LIKE '%"+ searchedText + "%'" );
            mymeta = myresObj.getMetaData();
         
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return myresObj;
    }
    
     private ResultSet GetSearchedNFilteredData()
    {
        try {
            db();
            myresObj = myStatObj.executeQuery("SELECT * from MMP.MyTable WHERE FILENAME LIKE '%"+ searchedText + "%' AND ANNOTATION IS NOT NULL" );
            mymeta = myresObj.getMetaData();
         
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return myresObj;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Annotate;
    private javax.swing.JButton Delete;
    private javax.swing.JScrollPane DisplayScrollPane;
    private javax.swing.JButton Filter;
    private javax.swing.JLabel Title;
    private javax.swing.JButton Upload;
    private javax.swing.JButton cancelSearchBtn;
    private javax.swing.JPanel functionPanel;
    private javax.swing.JPanel imgPanel;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel msg;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
