
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author User
 */
public class Gui extends java.awt.Frame {

    /**
     * Creates new form GU
     */
     Connection myconObj;  // to connect DB
     Statement myStatObj =null;  // to execute queries
     ResultSet myresObj =null; // present the data fetch from queries
   //  Statement stmt;          // Statement for static SQL Statement
    PreparedStatement pstmt; //Prepared statment
     ResultSetMetaData mymeta = null; // to process queries
 
    public Gui() {
        initComponents();
    }
    public void db(){
         try {
             myconObj = DriverManager.getConnection("jdbc:derby://localhost:1527/localDB", "MMP", "1234");
             myStatObj = myconObj.createStatement();
             myresObj = myStatObj.executeQuery("SELECT * from MMP.MyTable");
             mymeta = myresObj.getMetaData();
             System.out.println("Database connected"); 
        
             int columnNo = mymeta.getColumnCount();
            //System.out.println(columnNo);
            for(int i=1; i<=columnNo; i++){
                System.out.print(mymeta.getColumnName(i)+ "\t");
            }
            
            System.out.println();
            while(myresObj.next()){
                for(int i =1; i<=columnNo; i++){
                    System.out.print(myresObj.getObject(i)+ "\t");
                }
                System.out.println();
            }    
         } catch (SQLException ex) {
             ex.printStackTrace();
         }
    
    }
    /**
     * @param args the command line arguments
     */
    //MAIN METHOD
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });

       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        ErrorMsg = new javax.swing.JLabel();
        DisplayScrollPane = new javax.swing.JScrollPane();
        imgPanel = new javax.swing.JPanel();
        pic1label = new javax.swing.JLabel();
        functionPanel = new javax.swing.JPanel();
        Upload = new javax.swing.JButton();
        Annotate = new javax.swing.JButton();
        View = new javax.swing.JButton();
        Filter = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        Title.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Title.setText("Title");

        ErrorMsg.setForeground(new java.awt.Color(255, 0, 0));
        ErrorMsg.setText("Error Message");

        pic1label.setVerifyInputWhenFocusTarget(false);
        imgPanel.add(pic1label);

        DisplayScrollPane.setViewportView(imgPanel);
        try {
            db();
            myresObj = myStatObj.executeQuery("SELECT * from MMP.MyTable");
            mymeta = myresObj.getMetaData();
            int columnNo = mymeta.getColumnCount();

            JLabel[] pics = new JLabel[100];
            JLabel[] picLabels = new JLabel[100];
            int i = 0;

            while(myresObj.next()){

                String fileName = myresObj.getString("FILENAME");
                InputStream is = myresObj.getBinaryStream("IMAGE"); 

                //CREATE LABEL
                pics[i] = new JLabel();

                picLabels[i] = new JLabel();

                pics[i].setHorizontalTextPosition(JLabel.CENTER);
                pics[i].setVerticalTextPosition(JLabel.BOTTOM);

                pics[i].setMinimumSize(new Dimension(200, 200));
                pics[i].setPreferredSize(new Dimension(200, 200));
                pics[i].setMaximumSize(new Dimension(200, 200));
                pics[i].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
                pics[i].setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

                // Decode the inputstream as BufferedImage
                try{
                    BufferedImage img=ImageIO.read(is);

                    Image imgIcon = img.getScaledInstance(200, 200, Image.SCALE_SMOOTH);

                    pics[i].setIcon(new ImageIcon(imgIcon));
                    picLabels[i].setText(fileName);

                    pics[i].addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            System.out.println("clicked");
                        };

                    });

                    imgPanel.add(pics[i]);
                    imgPanel.add(picLabels[i]);

                }catch(Exception e){
                    System.out.println(e);
                }							
                i ++;
            }    
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Title)
                            .addComponent(ErrorMsg))
                        .addGap(913, 913, 913))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(DisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 974, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title)
                .addGap(4, 4, 4)
                .addComponent(DisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(ErrorMsg)
                .addGap(29, 29, 29))
        );

        Upload.setText("Upload");
        Upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadActionPerformed(evt);
            }
        });

        Annotate.setText("Anotate");
        Annotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnnotateActionPerformed(evt);
            }
        });

        View.setText("View");

        Filter.setText("Filter");
        Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout functionPanelLayout = new javax.swing.GroupLayout(functionPanel);
        functionPanel.setLayout(functionPanelLayout);
        functionPanelLayout.setHorizontalGroup(
            functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(functionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Annotate)
                    .addComponent(Upload)
                    .addComponent(View)
                    .addComponent(Filter))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        functionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Annotate, Filter, Upload, View});

        functionPanelLayout.setVerticalGroup(
            functionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(functionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Upload)
                .addGap(18, 18, 18)
                .addComponent(Annotate)
                .addGap(18, 18, 18)
                .addComponent(View)
                .addGap(18, 18, 18)
                .addComponent(Filter)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(functionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(functionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FilterActionPerformed

    private void AnnotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnnotateActionPerformed
    /*    java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new write().setVisible(true);
            }
        });
*/
     //Update filename
        Scanner input = new Scanner (System.in);
        String annotation = input.nextLine();
            try {
                db();
                PreparedStatement annotate = myconObj.prepareStatement("UPDATE MMP.MyTable(FILENAME) VALUES(?)");
                annotate.setString(2, annotation);
                annotate.execute();
                pic1label.setText(annotation);
                System.out.println("Annotate successfully!");
        
            } catch (SQLException ex) {
                ex.printStackTrace();
                System.out.println("Not successful.");
            } 
    
    }//GEN-LAST:event_AnnotateActionPerformed

    private void UploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadActionPerformed
        // TODO add your handling code here:
        JFileChooser filechooser = new JFileChooser (); // enable user to choose file from computer
        FileNameExtensionFilter filter = new FileNameExtensionFilter ("4 Extensions Supported","jpg","png","jpeg","gif");
        filechooser.setFileFilter(filter);
        int selected = filechooser.showOpenDialog(this);
        
        if(selected == JFileChooser.APPROVE_OPTION){
            File file = filechooser.getSelectedFile();
            String getSelectedImage = file.getAbsolutePath();
            JOptionPane.showMessageDialog(null, getSelectedImage);
         
            //Storing image in database
            try {
                db();
                PreparedStatement upload = myconObj.prepareStatement("INSERT INTO MMP.MyTable(FILENAME, IMAGE) VALUES(?, ?)");    
                upload.setString(1, getSelectedImage);
                FileInputStream img = new FileInputStream(getSelectedImage);
                upload.setBlob(2, img);
                upload.execute();
               
                
            } catch (SQLException | FileNotFoundException ex) {
                ex.printStackTrace();
            }      
        }
    }//GEN-LAST:event_UploadActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Annotate;
    private javax.swing.JScrollPane DisplayScrollPane;
    private javax.swing.JLabel ErrorMsg;
    private javax.swing.JButton Filter;
    private javax.swing.JLabel Title;
    private javax.swing.JButton Upload;
    private javax.swing.JButton View;
    private javax.swing.JPanel functionPanel;
    private javax.swing.JPanel imgPanel;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel pic1label;
    // End of variables declaration//GEN-END:variables
}
