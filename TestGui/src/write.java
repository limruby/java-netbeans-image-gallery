
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author User
 */
public class write extends java.awt.Frame {

    /**
     * Creates new form write
     */
    Connection myconObj;  // to connect DB
     Statement myStatObj =null;  // to execute queries
     ResultSet myresObj =null; // present the data fetch from queries
   //  Statement stmt;          // Statement for static SQL Statement
    PreparedStatement pstmt; //Prepared statment
     ResultSetMetaData mymeta = null; // to process queries
     static int selectedID;
 //    static boolean filtered = false;
 
    
    public write(int selectedID) {
        this.selectedID = selectedID;
        initComponents();
        
    }

    public void db(){
         try {
             myconObj = DriverManager.getConnection("jdbc:derby://localhost:1527/localDB", "MMP", "1234");
             myStatObj = myconObj.createStatement();
             myresObj = myStatObj.executeQuery("SELECT * from MMP.MyTable");
             mymeta = myresObj.getMetaData();
             System.out.println("Database connected"); 
        
             int columnNo = mymeta.getColumnCount();
            //System.out.println(columnNo);
            for(int i=1; i<=columnNo; i++){
                System.out.print(mymeta.getColumnName(i)+ "\t");
            }
            
            System.out.println();
            while(myresObj.next()){
                for(int i =1; i<=columnNo; i++){
                    System.out.print(myresObj.getObject(i)+ "\t");
                }
                System.out.println();
            }    
         } catch (SQLException ex) {
             ex.printStackTrace();
         }
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textInput = new javax.swing.JTextField();
        addText = new javax.swing.JButton();
        dlText = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setText("Insert text");

        addText.setText("Add");
        addText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTextActionPerformed(evt);
            }
        });

        dlText.setText("Delete");
        dlText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dlTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(textInput, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dlText)
                        .addGap(26, 26, 26))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(addText)
                    .addComponent(dlText))
                .addGap(18, 18, 18)
                .addComponent(textInput, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        try {
            db();
            myresObj = myStatObj.executeQuery("SELECT ANNOTATION from MMP.MyTable WHERE ID = "+selectedID);
            mymeta = myresObj.getMetaData();
            int columnNo = mymeta.getColumnCount();

            while(myresObj.next()){

                String pastAnnotation = myresObj.getString("ANNOTATION");
                textInput.setText(pastAnnotation);

            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void addTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTextActionPerformed
      //Add annotation
     
           try {
                db();
                String annotation = textInput.getText();
              
                if(textInput.getText().length()!= 0){
                    String query =  "UPDATE MYTABLE SET ANNOTATION = '"+ annotation + "' WHERE ID = " + selectedID;
                    PreparedStatement annotate = myconObj.prepareStatement(query);
                    annotate.execute();
                    System.out.println("Annotate successfully!" + annotation.length());
                }
                else if (textInput.getText().isEmpty()){
                    String query2 =  "UPDATE MYTABLE SET ANNOTATION = NULL WHERE ID = " + selectedID;
                    PreparedStatement noTxt = myconObj.prepareStatement(query2);
                    noTxt.execute();
                    System.out.println("Annotation in "+selectedID + " is null");
                }
                this.setVisible(false);
                
                new Gui(false).setVisible(true);
        
            } catch (SQLException ex) { 
                ex.printStackTrace();
                System.out.println("Not successful.");    
            }
        
    }//GEN-LAST:event_addTextActionPerformed

    private void dlTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dlTextActionPerformed
       try {
                db();
                String query = "UPDATE MYTABLE SET ANNOTATION = NULL WHERE ID = " + selectedID; 
                PreparedStatement del = myconObj.prepareStatement(query);
                del.execute();
                System.out.println("Annotation deleted");
                this.setVisible(false);
                new Gui(false).setVisible(true);
        
            } catch (SQLException ex) { 
                ex.printStackTrace();
                System.out.println("Deletion not successful.");    
            }
    }//GEN-LAST:event_dlTextActionPerformed
  
    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addText;
    private javax.swing.JButton dlText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField textInput;
    // End of variables declaration//GEN-END:variables
}
